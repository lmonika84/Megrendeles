/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.awt.Frame;
import java.sql.SQLException;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import model.IModell;
import model.Rendeles;
import model.Szemely;

/**
 *
 * @author monika.lohr
 */
public class MegrendelsekDialog extends javax.swing.JDialog implements TableModelListener {

   private IModell model;
   private Frame parent; 
   List<Rendeles> megrendelesek;
   List<Szemely> megrendelok;
    
    public MegrendelsekDialog(java.awt.Frame parent, IModell model) {
        super(parent, true);
        this.model=model;
        this.parent=parent; 
         
        initComponents();
        setLocationRelativeTo(parent);
        setTitle("Megrendelések kezelése");
        
        DefaultTableModel dtm = (DefaultTableModel) tblMegrendelesek.getModel();
        
       try {
           megrendelok = model.getSzemelyek();
           cbMegrendelok.setModel(new DefaultComboBoxModel(megrendelok.toArray()));
           cbMegrendelok.setSelectedIndex(0);
       } catch (SQLException ex) {
           JOptionPane.showMessageDialog(rootPane, ex, "Adatbázis hiba", JOptionPane.ERROR_MESSAGE);
       }       
        refreshTable();    
    }
 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMegrendelesek = new javax.swing.JTable();
        btnÚj = new javax.swing.JButton();
        btnSzerkeszt = new javax.swing.JButton();
        btnTorol = new javax.swing.JButton();
        btnOK = new javax.swing.JButton();
        lbMegrendelo = new javax.swing.JLabel();
        cbMegrendelok = new javax.swing.JComboBox();
        chbTeljesitetlen = new javax.swing.JCheckBox();

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        jCheckBoxMenuItem2.setSelected(true);
        jCheckBoxMenuItem2.setText("jCheckBoxMenuItem2");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tblMegrendelesek.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null}
            },
            new String [] {
                "Összeg", "Darabszám", "Teljesítve"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblMegrendelesek);

        btnÚj.setText("Új");

        btnSzerkeszt.setText("Szerkeszt");

        btnTorol.setText("Töröl");
        btnTorol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTorolActionPerformed(evt);
            }
        });

        btnOK.setText("OK");

        lbMegrendelo.setText("Megrendelő:");

        cbMegrendelok.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbMegrendelok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbMegrendelokActionPerformed(evt);
            }
        });

        chbTeljesitetlen.setText("csak Teljesítetlenek");
        chbTeljesitetlen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chbTeljesitetlenActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnÚj)
                            .addComponent(btnSzerkeszt)
                            .addComponent(btnTorol)
                            .addComponent(btnOK)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbMegrendelo, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbMegrendelok, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(chbTeljesitetlen, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnOK, btnSzerkeszt, btnTorol, btnÚj});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbMegrendelo)
                    .addComponent(cbMegrendelok, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chbTeljesitetlen, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnÚj)
                        .addGap(14, 14, 14)
                        .addComponent(btnSzerkeszt)
                        .addGap(18, 18, 18)
                        .addComponent(btnTorol)
                        .addGap(110, 110, 110)
                        .addComponent(btnOK))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnTorolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTorolActionPerformed
        int selectedIndex = tblMegrendelesek.getSelectedRow();
        
        if(selectedIndex>=0){
          int valasz = JOptionPane.showConfirmDialog(parent, "Bizots hogy törölni szeretnéd?", "Törlés megerősítés", JOptionPane.YES_NO_OPTION);
         if(valasz==JOptionPane.YES_OPTION){
              Rendeles selected = megrendelesek.get(selectedIndex);
               try {
           model.removeRendeles(selected);
           refreshTable();
       } catch (SQLException ex) {
          JOptionPane.showMessageDialog(rootPane, ex, "Adatbázis hiba", JOptionPane.ERROR_MESSAGE);
       }
         }
     
        }else{
            JOptionPane.showMessageDialog(rootPane, "Válassz ki egy megrendelést", "Nincs kiválasztva semmi", JOptionPane.ERROR_MESSAGE);
            
            
        }  
    }//GEN-LAST:event_btnTorolActionPerformed

    private void cbMegrendelokActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbMegrendelokActionPerformed
    
        Szemely selected = (Szemely) cbMegrendelok.getSelectedItem();
   
       try {
           megrendelesek=model.getRendelesek(selected);
           refreshTable();
           
       } catch (SQLException ex) {
           JOptionPane.showMessageDialog(rootPane, ex, "Adatbázis hiba", JOptionPane.ERROR_MESSAGE);

       }
    }//GEN-LAST:event_cbMegrendelokActionPerformed

    private void chbTeljesitetlenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chbTeljesitetlenActionPerformed
        refreshTable();
    }//GEN-LAST:event_chbTeljesitetlenActionPerformed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOK;
    private javax.swing.JButton btnSzerkeszt;
    private javax.swing.JButton btnTorol;
    private javax.swing.JButton btnÚj;
    private javax.swing.JComboBox cbMegrendelok;
    private javax.swing.JCheckBox chbTeljesitetlen;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbMegrendelo;
    private javax.swing.JTable tblMegrendelesek;
    // End of variables declaration//GEN-END:variables

    private void refreshTable() {
      // try {
          // megrendelesek=model.getRendelesek(); -> ki kell törölni mert az összes sort lekérdezi, mi viszont csak a kiválasztott megrendelését kérjük.
           DefaultTableModel dtm  = (DefaultTableModel)tblMegrendelesek.getModel();
           
           dtm.getDataVector().removeAllElements();
            dtm.fireTableDataChanged();
            
           for (Rendeles m : megrendelesek) {
               if(!chbTeljesitetlen.isSelected()||(chbTeljesitetlen.isSelected()&& !m.isTeljesitve())){
                    Vector sor = new Vector();
               sor.add(m.getOsszeg());
               sor.add(m.getDarabszam());
               sor.add(m.isTeljesitve());
               
               dtm.addRow(sor);   
               }
               
                          
           }
//       } catch (SQLException ex) {
//           JOptionPane.showMessageDialog(rootPane, ex, "Adatbázis hiba", JOptionPane.ERROR_MESSAGE
//           );
//       }
    }

    @Override
    public void tableChanged(TableModelEvent e) {
        DefaultTableModel dtm = (DefaultTableModel) tblMegrendelesek.getModel();
                      
           int sorIndex = e.getFirstRow();
           int oszlopIndex = e.getColumn();
           
        if(e.getType()==TableModelEvent.UPDATE && sorIndex>=0 && oszlopIndex>=0){
         
           Object ujErtek = dtm.getValueAt(sorIndex,oszlopIndex);
           
           Rendeles selected = megrendelesek.get(sorIndex);
           
           switch (oszlopIndex){
               case 0: selected.setOsszeg((Integer) ujErtek);
                    break;
               case 1: selected.setDarabszam((Integer) ujErtek);
                    break;
               case 2: selected.setTeljesitve((Boolean) ujErtek);
                    break;
           }
           
            try {
                model.updateRendeles(selected);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(rootPane, ex, "Adatbázis hiba", JOptionPane.ERROR_MESSAGE );
            }
           
        
            
        }
    }
}
